{"ast":null,"code":"var _jsxFileName = \"/Users/dannymchugh/Documents/beat-store/new-beat-store/frontend/src/context/CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cart, setCart] = useState([]);\n  const addToCart = item => {\n    if (!item || !item.id) {\n      console.error('Invalid item provided. Make sure the item has an `id`.');\n      return;\n    }\n    console.log('Adding to cart:', item);\n\n    // Check if an identical item (based on a unique `id`) is already in the cart\n    setCart(prevCart => {\n      if (prevCart.find(cartItem => cartItem.id === item.id)) {\n        console.warn(`Item with ID ${item.id} is already in the cart.`);\n        return prevCart; // Return the cart unchanged\n      }\n      const updatedCart = [...prevCart, {\n        ...item\n      }]; // Add item to the cart\n      console.log('Cart after addition:', updatedCart);\n      return updatedCart;\n    });\n  };\n  const removeFromCart = id => {\n    if (!id) {\n      console.error('Invalid ID provided. Cannot remove item without an ID.');\n      return;\n    }\n    console.log('Removing item with id:', id);\n    setCart(prevCart => {\n      const updatedCart = prevCart.filter(item => item.id !== id);\n      console.log('Cart after removal:', updatedCart);\n      return updatedCart;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      removeFromCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","addToCart","item","id","console","error","log","prevCart","find","cartItem","warn","updatedCart","removeFromCart","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["/Users/dannymchugh/Documents/beat-store/new-beat-store/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n  const [cart, setCart] = useState([]);\n\n  const addToCart = (item) => {\n    if (!item || !item.id) {\n      console.error('Invalid item provided. Make sure the item has an `id`.');\n      return;\n    }\n\n    console.log('Adding to cart:', item);\n\n    // Check if an identical item (based on a unique `id`) is already in the cart\n    setCart((prevCart) => {\n      if (prevCart.find((cartItem) => cartItem.id === item.id)) {\n        console.warn(`Item with ID ${item.id} is already in the cart.`);\n        return prevCart; // Return the cart unchanged\n      }\n      const updatedCart = [...prevCart, { ...item }]; // Add item to the cart\n      console.log('Cart after addition:', updatedCart);\n      return updatedCart;\n    });\n  };\n\n  const removeFromCart = (id) => {\n    if (!id) {\n      console.error('Invalid ID provided. Cannot remove item without an ID.');\n      return;\n    }\n\n    console.log('Removing item with id:', id);\n\n    setCart((prevCart) => {\n      const updatedCart = prevCart.filter((item) => item.id !== id);\n      console.log('Cart after removal:', updatedCart);\n      return updatedCart;\n    });\n  };\n\n  return (\n    <CartContext.Provider value={{ cart, addToCart, removeFromCart }}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n\nexport const useCart = () => useContext(CartContext);"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMS,SAAS,GAAIC,IAAI,IAAK;IAC1B,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACC,EAAE,EAAE;MACrBC,OAAO,CAACC,KAAK,CAAC,wDAAwD,CAAC;MACvE;IACF;IAEAD,OAAO,CAACE,GAAG,CAAC,iBAAiB,EAAEJ,IAAI,CAAC;;IAEpC;IACAF,OAAO,CAAEO,QAAQ,IAAK;MACpB,IAAIA,QAAQ,CAACC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACN,EAAE,KAAKD,IAAI,CAACC,EAAE,CAAC,EAAE;QACxDC,OAAO,CAACM,IAAI,CAAC,gBAAgBR,IAAI,CAACC,EAAE,0BAA0B,CAAC;QAC/D,OAAOI,QAAQ,CAAC,CAAC;MACnB;MACA,MAAMI,WAAW,GAAG,CAAC,GAAGJ,QAAQ,EAAE;QAAE,GAAGL;MAAK,CAAC,CAAC,CAAC,CAAC;MAChDE,OAAO,CAACE,GAAG,CAAC,sBAAsB,EAAEK,WAAW,CAAC;MAChD,OAAOA,WAAW;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,cAAc,GAAIT,EAAE,IAAK;IAC7B,IAAI,CAACA,EAAE,EAAE;MACPC,OAAO,CAACC,KAAK,CAAC,wDAAwD,CAAC;MACvE;IACF;IAEAD,OAAO,CAACE,GAAG,CAAC,wBAAwB,EAAEH,EAAE,CAAC;IAEzCH,OAAO,CAAEO,QAAQ,IAAK;MACpB,MAAMI,WAAW,GAAGJ,QAAQ,CAACM,MAAM,CAAEX,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC7DC,OAAO,CAACE,GAAG,CAAC,qBAAqB,EAAEK,WAAW,CAAC;MAC/C,OAAOA,WAAW;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,oBACEjB,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,IAAI;MAAEE,SAAS;MAAEW;IAAe,CAAE;IAAAf,QAAA,EAC9DA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACrB,EAAA,CA3CWF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AA6CzB,OAAO,MAAMyB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM/B,UAAU,CAACI,WAAW,CAAC;AAAA;AAAC2B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}